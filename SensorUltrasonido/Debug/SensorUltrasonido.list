
SensorUltrasonido.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001874  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080019fc  080019fc  000029fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a0c  08001a0c  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08001a0c  08001a0c  00002a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001a14  08001a14  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a14  08001a14  00002a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a18  08001a18  00002a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a1c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000300c  2**0
                  CONTENTS
 10 .bss          0000002c  2000000c  2000000c  0000300c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000038  20000038  0000300c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000038c4  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000ef5  00000000  00000000  00006900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000438  00000000  00000000  000077f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000030a  00000000  00000000  00007c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001edcf  00000000  00000000  00007f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004f88  00000000  00000000  00026d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc516  00000000  00000000  0002bc91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e81a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f40  00000000  00000000  000e81ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  000e912c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080019e4 	.word	0x080019e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080019e4 	.word	0x080019e4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fab8 	bl	8000a30 <HAL_Init>

  /* USER CODE BEGIN Init */
  // Habilitar el TRC (Trace Control)
  	  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80004c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000580 <main+0xc8>)
 80004c2:	68db      	ldr	r3, [r3, #12]
 80004c4:	4a2e      	ldr	r2, [pc, #184]	@ (8000580 <main+0xc8>)
 80004c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004ca:	60d3      	str	r3, [r2, #12]
  	  // Reiniciar el contador de ciclos
  	  DWT->CYCCNT = 0;
 80004cc:	4b2d      	ldr	r3, [pc, #180]	@ (8000584 <main+0xcc>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	605a      	str	r2, [r3, #4]
  	  // Habilitar el contador
  	  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80004d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000584 <main+0xcc>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a2b      	ldr	r2, [pc, #172]	@ (8000584 <main+0xcc>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6013      	str	r3, [r2, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f859 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f8c1 	bl	8000668 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Medir la distancia */
	      distancia = HC_SR04_ReadDistance();
 80004e6:	f000 f923 	bl	8000730 <HC_SR04_ReadDistance>
 80004ea:	eef0 7a40 	vmov.f32	s15, s0
 80004ee:	4b26      	ldr	r3, [pc, #152]	@ (8000588 <main+0xd0>)
 80004f0:	edc3 7a00 	vstr	s15, [r3]

	      // Si el LED rojo está activo, verificar si han pasado 5 segundos
	      if (led_rojo_encendido) {
 80004f4:	4b25      	ldr	r3, [pc, #148]	@ (800058c <main+0xd4>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00f      	beq.n	800051c <main+0x64>
	          if (HAL_GetTick() - tiempo_inicio_led_rojo >= 5000) { // 5 segundos
 80004fc:	f000 fafe 	bl	8000afc <HAL_GetTick>
 8000500:	4602      	mov	r2, r0
 8000502:	4b23      	ldr	r3, [pc, #140]	@ (8000590 <main+0xd8>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	f241 3287 	movw	r2, #4999	@ 0x1387
 800050c:	4293      	cmp	r3, r2
 800050e:	d933      	bls.n	8000578 <main+0xc0>
	              LED_All_Off(); // Apagar todos los LEDs
 8000510:	f000 f9de 	bl	80008d0 <LED_All_Off>
	              led_rojo_encendido = 0; // Restablecer la bandera
 8000514:	4b1d      	ldr	r3, [pc, #116]	@ (800058c <main+0xd4>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	e02d      	b.n	8000578 <main+0xc0>
	          }
	      } else {
	          // Cambiar el color del LED según la distancia
	          if (distancia < 6.0f) {
 800051c:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <main+0xd0>)
 800051e:	edd3 7a00 	vldr	s15, [r3]
 8000522:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8000526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800052a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800052e:	d50a      	bpl.n	8000546 <main+0x8e>
	              LED_Red_On(); // Encender el LED rojo
 8000530:	f000 f98c 	bl	800084c <LED_Red_On>
	              tiempo_inicio_led_rojo = HAL_GetTick(); // Guardar el tiempo actual
 8000534:	f000 fae2 	bl	8000afc <HAL_GetTick>
 8000538:	4603      	mov	r3, r0
 800053a:	4a15      	ldr	r2, [pc, #84]	@ (8000590 <main+0xd8>)
 800053c:	6013      	str	r3, [r2, #0]
	              led_rojo_encendido = 1; // Activar la bandera
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <main+0xd4>)
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]
 8000544:	e018      	b.n	8000578 <main+0xc0>
	          } else if (distancia >= 6.0f && distancia <= 30.0f) {
 8000546:	4b10      	ldr	r3, [pc, #64]	@ (8000588 <main+0xd0>)
 8000548:	edd3 7a00 	vldr	s15, [r3]
 800054c:	eeb1 7a08 	vmov.f32	s14, #24	@ 0x40c00000  6.0
 8000550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000558:	db0c      	blt.n	8000574 <main+0xbc>
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <main+0xd0>)
 800055c:	edd3 7a00 	vldr	s15, [r3]
 8000560:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800056c:	d802      	bhi.n	8000574 <main+0xbc>
	              LED_Green_On(); // Encender el LED verde
 800056e:	f000 f983 	bl	8000878 <LED_Green_On>
 8000572:	e001      	b.n	8000578 <main+0xc0>
	          } else {
	              LED_Blue_On(); // Encender el LED azul
 8000574:	f000 f996 	bl	80008a4 <LED_Blue_On>
	          }
	      }

	      /* Retardo entre mediciones (en ms) */
	      HAL_Delay(200);
 8000578:	20c8      	movs	r0, #200	@ 0xc8
 800057a:	f000 facb 	bl	8000b14 <HAL_Delay>
	      distancia = HC_SR04_ReadDistance();
 800057e:	e7b2      	b.n	80004e6 <main+0x2e>
 8000580:	e000edf0 	.word	0xe000edf0
 8000584:	e0001000 	.word	0xe0001000
 8000588:	20000028 	.word	0x20000028
 800058c:	2000002c 	.word	0x2000002c
 8000590:	20000030 	.word	0x20000030

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	@ 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f001 f9f2 	bl	800198c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	@ (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	@ (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	@ (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	@ (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	@ (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000608:	2364      	movs	r3, #100	@ 0x64
 800060a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000610:	2307      	movs	r3, #7
 8000612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fd53 	bl	80010c4 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000624:	f000 f96a 	bl	80008fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000634:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2103      	movs	r1, #3
 8000646:	4618      	mov	r0, r3
 8000648:	f000 ffb4 	bl	80015b4 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000652:	f000 f953 	bl	80008fc <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	@ 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b088      	sub	sp, #32
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <MX_GPIO_Init+0xbc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a27      	ldr	r2, [pc, #156]	@ (8000724 <MX_GPIO_Init+0xbc>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <MX_GPIO_Init+0xbc>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <MX_GPIO_Init+0xbc>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a20      	ldr	r2, [pc, #128]	@ (8000724 <MX_GPIO_Init+0xbc>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <MX_GPIO_Init+0xbc>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2101      	movs	r1, #1
 80006ba:	481b      	ldr	r0, [pc, #108]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006bc:	f000 fce8 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2107      	movs	r1, #7
 80006c4:	4819      	ldr	r0, [pc, #100]	@ (800072c <MX_GPIO_Init+0xc4>)
 80006c6:	f000 fce3 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	4619      	mov	r1, r3
 80006e0:	4811      	ldr	r0, [pc, #68]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006e2:	f000 fb21 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006e6:	2302      	movs	r3, #2
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	4619      	mov	r1, r3
 80006f8:	480b      	ldr	r0, [pc, #44]	@ (8000728 <MX_GPIO_Init+0xc0>)
 80006fa:	f000 fb15 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80006fe:	2307      	movs	r3, #7
 8000700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800070a:	2301      	movs	r3, #1
 800070c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	4619      	mov	r1, r3
 8000714:	4805      	ldr	r0, [pc, #20]	@ (800072c <MX_GPIO_Init+0xc4>)
 8000716:	f000 fb07 	bl	8000d28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800
 8000728:	40020800 	.word	0x40020800
 800072c:	40020000 	.word	0x40020000

08000730 <HC_SR04_ReadDistance>:
/**
  * @brief Lee la distancia medida por el HC-SR04 usando PC0 (Trig) y PC1 (Echo).
  * @retval Distancia en centímetros (float)
  */
float HC_SR04_ReadDistance(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
    uint32_t tiempoEcho_us = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
    float distancia_cm = 0.0f;
 800073a:	f04f 0300 	mov.w	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]

    // 1) Generar pulso de 10 us en TRIG (PC0)
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2101      	movs	r1, #1
 8000744:	4829      	ldr	r0, [pc, #164]	@ (80007ec <HC_SR04_ReadDistance+0xbc>)
 8000746:	f000 fca3 	bl	8001090 <HAL_GPIO_WritePin>
    DWT_Delay_us(2);      // Pequeño retraso
 800074a:	2002      	movs	r0, #2
 800074c:	f000 f858 	bl	8000800 <DWT_Delay_us>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2101      	movs	r1, #1
 8000754:	4825      	ldr	r0, [pc, #148]	@ (80007ec <HC_SR04_ReadDistance+0xbc>)
 8000756:	f000 fc9b 	bl	8001090 <HAL_GPIO_WritePin>
    DWT_Delay_us(10);     // Pulso de 10 us
 800075a:	200a      	movs	r0, #10
 800075c:	f000 f850 	bl	8000800 <DWT_Delay_us>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2101      	movs	r1, #1
 8000764:	4821      	ldr	r0, [pc, #132]	@ (80007ec <HC_SR04_ReadDistance+0xbc>)
 8000766:	f000 fc93 	bl	8001090 <HAL_GPIO_WritePin>

    // 2) Esperar a que Echo (PC1) se ponga en alto
    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_RESET);
 800076a:	bf00      	nop
 800076c:	2102      	movs	r1, #2
 800076e:	481f      	ldr	r0, [pc, #124]	@ (80007ec <HC_SR04_ReadDistance+0xbc>)
 8000770:	f000 fc76 	bl	8001060 <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d0f8      	beq.n	800076c <HC_SR04_ReadDistance+0x3c>

    // Iniciamos conteo de tiempo
    uint32_t startTick = DWT->CYCCNT;
 800077a:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <HC_SR04_ReadDistance+0xc0>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	607b      	str	r3, [r7, #4]

    // 3) Esperar a que Echo se ponga en bajo
    while (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_SET);
 8000780:	bf00      	nop
 8000782:	2102      	movs	r1, #2
 8000784:	4819      	ldr	r0, [pc, #100]	@ (80007ec <HC_SR04_ReadDistance+0xbc>)
 8000786:	f000 fc6b 	bl	8001060 <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b01      	cmp	r3, #1
 800078e:	d0f8      	beq.n	8000782 <HC_SR04_ReadDistance+0x52>

    // Fin de la medición
    uint32_t endTick = DWT->CYCCNT;
 8000790:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <HC_SR04_ReadDistance+0xc0>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	603b      	str	r3, [r7, #0]

    // 4) Calcular duración en microsegundos
    //    Suponiendo SystemCoreClock = 168 MHz
    //    1 tick DWT ~ 1/168e6 s => us = ticks / (168e6/1e6)
    tiempoEcho_us = (uint32_t)((endTick - startTick) / (SystemCoreClock / 1000000.0f));
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	ee07 3a90 	vmov	s15, r3
 80007a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <HC_SR04_ReadDistance+0xc4>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007b0:	ed9f 6a11 	vldr	s12, [pc, #68]	@ 80007f8 <HC_SR04_ReadDistance+0xc8>
 80007b4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80007b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007c0:	ee17 3a90 	vmov	r3, s15
 80007c4:	60fb      	str	r3, [r7, #12]

    // 5) Calcular distancia en cm
    //    Distancia (cm) ≈ tiempoEcho_us / 58
    distancia_cm = (float)tiempoEcho_us / 58.0f;
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	ee07 3a90 	vmov	s15, r3
 80007cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007d0:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80007fc <HC_SR04_ReadDistance+0xcc>
 80007d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007d8:	edc7 7a02 	vstr	s15, [r7, #8]

    return distancia_cm;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	ee07 3a90 	vmov	s15, r3
}
 80007e2:	eeb0 0a67 	vmov.f32	s0, s15
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40020800 	.word	0x40020800
 80007f0:	e0001000 	.word	0xe0001000
 80007f4:	20000000 	.word	0x20000000
 80007f8:	49742400 	.word	0x49742400
 80007fc:	42680000 	.word	0x42680000

08000800 <DWT_Delay_us>:
/**
  * @brief Retardo en microsegundos usando DWT
  * @param us: microsegundos a esperar
  */
void DWT_Delay_us(uint32_t us)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
    // Valor inicial de conteo
    uint32_t startTick = DWT->CYCCNT;
 8000808:	4b0d      	ldr	r3, [pc, #52]	@ (8000840 <DWT_Delay_us+0x40>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	60fb      	str	r3, [r7, #12]
    // Calcular cuántos ticks de CPU corresponden a "us" microsegundos
    uint32_t ticks = us * (SystemCoreClock / 1000000UL);
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <DWT_Delay_us+0x44>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a0d      	ldr	r2, [pc, #52]	@ (8000848 <DWT_Delay_us+0x48>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	0c9a      	lsrs	r2, r3, #18
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	60bb      	str	r3, [r7, #8]
    // Esperar hasta que se cumpla
    while ((DWT->CYCCNT - startTick) < ticks);
 8000822:	bf00      	nop
 8000824:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <DWT_Delay_us+0x40>)
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	429a      	cmp	r2, r3
 8000830:	d8f8      	bhi.n	8000824 <DWT_Delay_us+0x24>
}
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e0001000 	.word	0xe0001000
 8000844:	20000000 	.word	0x20000000
 8000848:	431bde83 	.word	0x431bde83

0800084c <LED_Red_On>:

void LED_Red_On(void) {
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Encender Rojo
 8000850:	2201      	movs	r2, #1
 8000852:	2101      	movs	r1, #1
 8000854:	4807      	ldr	r0, [pc, #28]	@ (8000874 <LED_Red_On+0x28>)
 8000856:	f000 fc1b 	bl	8001090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Apagar Verde
 800085a:	2200      	movs	r2, #0
 800085c:	2102      	movs	r1, #2
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <LED_Red_On+0x28>)
 8000860:	f000 fc16 	bl	8001090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Apagar Azul
 8000864:	2200      	movs	r2, #0
 8000866:	2104      	movs	r1, #4
 8000868:	4802      	ldr	r0, [pc, #8]	@ (8000874 <LED_Red_On+0x28>)
 800086a:	f000 fc11 	bl	8001090 <HAL_GPIO_WritePin>
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40020000 	.word	0x40020000

08000878 <LED_Green_On>:

void LED_Green_On(void) {
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Encender Verde
 800087c:	2200      	movs	r2, #0
 800087e:	2102      	movs	r1, #2
 8000880:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <LED_Green_On+0x28>)
 8000882:	f000 fc05 	bl	8001090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Apagar Rojo
 8000886:	2201      	movs	r2, #1
 8000888:	2101      	movs	r1, #1
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <LED_Green_On+0x28>)
 800088c:	f000 fc00 	bl	8001090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // Apagar Azul
 8000890:	2201      	movs	r2, #1
 8000892:	2104      	movs	r1, #4
 8000894:	4802      	ldr	r0, [pc, #8]	@ (80008a0 <LED_Green_On+0x28>)
 8000896:	f000 fbfb 	bl	8001090 <HAL_GPIO_WritePin>
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40020000 	.word	0x40020000

080008a4 <LED_Blue_On>:

void LED_Blue_On(void) {
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // Encender Azul
 80008a8:	2201      	movs	r2, #1
 80008aa:	2104      	movs	r1, #4
 80008ac:	4807      	ldr	r0, [pc, #28]	@ (80008cc <LED_Blue_On+0x28>)
 80008ae:	f000 fbef 	bl	8001090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Apagar Rojo
 80008b2:	2200      	movs	r2, #0
 80008b4:	2101      	movs	r1, #1
 80008b6:	4805      	ldr	r0, [pc, #20]	@ (80008cc <LED_Blue_On+0x28>)
 80008b8:	f000 fbea 	bl	8001090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Apagar Verde
 80008bc:	2200      	movs	r2, #0
 80008be:	2102      	movs	r1, #2
 80008c0:	4802      	ldr	r0, [pc, #8]	@ (80008cc <LED_Blue_On+0x28>)
 80008c2:	f000 fbe5 	bl	8001090 <HAL_GPIO_WritePin>
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40020000 	.word	0x40020000

080008d0 <LED_All_Off>:

void LED_All_Off(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Apagar Rojo
 80008d4:	2200      	movs	r2, #0
 80008d6:	2101      	movs	r1, #1
 80008d8:	4807      	ldr	r0, [pc, #28]	@ (80008f8 <LED_All_Off+0x28>)
 80008da:	f000 fbd9 	bl	8001090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // Apagar Verde
 80008de:	2200      	movs	r2, #0
 80008e0:	2102      	movs	r1, #2
 80008e2:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <LED_All_Off+0x28>)
 80008e4:	f000 fbd4 	bl	8001090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // Apagar Azul
 80008e8:	2200      	movs	r2, #0
 80008ea:	2104      	movs	r1, #4
 80008ec:	4802      	ldr	r0, [pc, #8]	@ (80008f8 <LED_All_Off+0x28>)
 80008ee:	f000 fbcf 	bl	8001090 <HAL_GPIO_WritePin>
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40020000 	.word	0x40020000

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <Error_Handler+0x8>

08000908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000916:	4a0f      	ldr	r2, [pc, #60]	@ (8000954 <HAL_MspInit+0x4c>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800091c:	6453      	str	r3, [r2, #68]	@ 0x44
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	603b      	str	r3, [r7, #0]
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000932:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <HAL_MspInit+0x4c>)
 8000934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000938:	6413      	str	r3, [r2, #64]	@ 0x40
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000946:	2007      	movs	r0, #7
 8000948:	f000 f9ba 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094c:	bf00      	nop
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <UsageFault_Handler+0x4>

08000980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ae:	f000 f891 	bl	8000ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <SystemInit+0x20>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009c2:	4a05      	ldr	r2, [pc, #20]	@ (80009d8 <SystemInit+0x20>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80009e0:	f7ff ffea 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009e4:	480c      	ldr	r0, [pc, #48]	@ (8000a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009e6:	490d      	ldr	r1, [pc, #52]	@ (8000a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009fc:	4c0a      	ldr	r4, [pc, #40]	@ (8000a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a0a:	f000 ffc7 	bl	800199c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0e:	f7ff fd53 	bl	80004b8 <main>
  bx  lr    
 8000a12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a20:	08001a1c 	.word	0x08001a1c
  ldr r2, =_sbss
 8000a24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a28:	20000038 	.word	0x20000038

08000a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a2c:	e7fe      	b.n	8000a2c <ADC_IRQHandler>
	...

08000a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a34:	4b0e      	ldr	r3, [pc, #56]	@ (8000a70 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0d      	ldr	r2, [pc, #52]	@ (8000a70 <HAL_Init+0x40>)
 8000a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a40:	4b0b      	ldr	r3, [pc, #44]	@ (8000a70 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <HAL_Init+0x40>)
 8000a46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <HAL_Init+0x40>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a07      	ldr	r2, [pc, #28]	@ (8000a70 <HAL_Init+0x40>)
 8000a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a58:	2003      	movs	r0, #3
 8000a5a:	f000 f931 	bl	8000cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5e:	2000      	movs	r0, #0
 8000a60:	f000 f808 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a64:	f7ff ff50 	bl	8000908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023c00 	.word	0x40023c00

08000a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ac8 <HAL_InitTick+0x54>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <HAL_InitTick+0x58>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f93b 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00e      	b.n	8000ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d80a      	bhi.n	8000abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f911 	bl	8000cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab4:	4a06      	ldr	r2, [pc, #24]	@ (8000ad0 <HAL_InitTick+0x5c>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	e000      	b.n	8000ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000004 	.word	0x20000004

08000ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_IncTick+0x20>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_IncTick+0x24>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a04      	ldr	r2, [pc, #16]	@ (8000af8 <HAL_IncTick+0x24>)
 8000ae6:	6013      	str	r3, [r2, #0]
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000034 	.word	0x20000034

08000afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b03      	ldr	r3, [pc, #12]	@ (8000b10 <HAL_GetTick+0x14>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000034 	.word	0x20000034

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff ffee 	bl	8000afc <HAL_GetTick>
 8000b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_Delay+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3a:	bf00      	nop
 8000b3c:	f7ff ffde 	bl	8000afc <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	@ (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	6039      	str	r1, [r7, #0]
 8000bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	db0a      	blt.n	8000bea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	490c      	ldr	r1, [pc, #48]	@ (8000c0c <__NVIC_SetPriority+0x4c>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	0112      	lsls	r2, r2, #4
 8000be0:	b2d2      	uxtb	r2, r2
 8000be2:	440b      	add	r3, r1
 8000be4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000be8:	e00a      	b.n	8000c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4908      	ldr	r1, [pc, #32]	@ (8000c10 <__NVIC_SetPriority+0x50>)
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	f003 030f 	and.w	r3, r3, #15
 8000bf6:	3b04      	subs	r3, #4
 8000bf8:	0112      	lsls	r2, r2, #4
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	761a      	strb	r2, [r3, #24]
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000e100 	.word	0xe000e100
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	@ 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	f1c3 0307 	rsb	r3, r3, #7
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	bf28      	it	cs
 8000c32:	2304      	movcs	r3, #4
 8000c34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	2b06      	cmp	r3, #6
 8000c3c:	d902      	bls.n	8000c44 <NVIC_EncodePriority+0x30>
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3b03      	subs	r3, #3
 8000c42:	e000      	b.n	8000c46 <NVIC_EncodePriority+0x32>
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c48:	f04f 32ff 	mov.w	r2, #4294967295
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43da      	mvns	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	401a      	ands	r2, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	fa01 f303 	lsl.w	r3, r1, r3
 8000c66:	43d9      	mvns	r1, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c6c:	4313      	orrs	r3, r2
         );
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3724      	adds	r7, #36	@ 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c8c:	d301      	bcc.n	8000c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e00f      	b.n	8000cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <SysTick_Config+0x40>)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	f7ff ff8e 	bl	8000bc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	@ (8000cbc <SysTick_Config+0x40>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <SysTick_Config+0x40>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f7ff ff47 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b086      	sub	sp, #24
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
 8000ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ce8:	f7ff ff5c 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	6978      	ldr	r0, [r7, #20]
 8000cf4:	f7ff ff8e 	bl	8000c14 <NVIC_EncodePriority>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cfe:	4611      	mov	r1, r2
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff5d 	bl	8000bc0 <__NVIC_SetPriority>
}
 8000d06:	bf00      	nop
 8000d08:	3718      	adds	r7, #24
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffb0 	bl	8000c7c <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]
 8000d42:	e16b      	b.n	800101c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	697a      	ldr	r2, [r7, #20]
 8000d54:	4013      	ands	r3, r2
 8000d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	f040 815a 	bne.w	8001016 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	f003 0303 	and.w	r3, r3, #3
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d005      	beq.n	8000d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d130      	bne.n	8000ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	68da      	ldr	r2, [r3, #12]
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db0:	2201      	movs	r2, #1
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	091b      	lsrs	r3, r3, #4
 8000dc6:	f003 0201 	and.w	r2, r3, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	d017      	beq.n	8000e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	2203      	movs	r2, #3
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	689a      	ldr	r2, [r3, #8]
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d123      	bne.n	8000e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	08da      	lsrs	r2, r3, #3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3208      	adds	r2, #8
 8000e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	f003 0307 	and.w	r3, r3, #7
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	4013      	ands	r3, r2
 8000e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	69b9      	ldr	r1, [r7, #24]
 8000e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f003 0203 	and.w	r2, r3, #3
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 80b4 	beq.w	8001016 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	4b60      	ldr	r3, [pc, #384]	@ (8001034 <HAL_GPIO_Init+0x30c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb6:	4a5f      	ldr	r2, [pc, #380]	@ (8001034 <HAL_GPIO_Init+0x30c>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8001034 <HAL_GPIO_Init+0x30c>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eca:	4a5b      	ldr	r2, [pc, #364]	@ (8001038 <HAL_GPIO_Init+0x310>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a52      	ldr	r2, [pc, #328]	@ (800103c <HAL_GPIO_Init+0x314>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d02b      	beq.n	8000f4e <HAL_GPIO_Init+0x226>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a51      	ldr	r2, [pc, #324]	@ (8001040 <HAL_GPIO_Init+0x318>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d025      	beq.n	8000f4a <HAL_GPIO_Init+0x222>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a50      	ldr	r2, [pc, #320]	@ (8001044 <HAL_GPIO_Init+0x31c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d01f      	beq.n	8000f46 <HAL_GPIO_Init+0x21e>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4f      	ldr	r2, [pc, #316]	@ (8001048 <HAL_GPIO_Init+0x320>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d019      	beq.n	8000f42 <HAL_GPIO_Init+0x21a>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4e      	ldr	r2, [pc, #312]	@ (800104c <HAL_GPIO_Init+0x324>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d013      	beq.n	8000f3e <HAL_GPIO_Init+0x216>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4d      	ldr	r2, [pc, #308]	@ (8001050 <HAL_GPIO_Init+0x328>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d00d      	beq.n	8000f3a <HAL_GPIO_Init+0x212>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4c      	ldr	r2, [pc, #304]	@ (8001054 <HAL_GPIO_Init+0x32c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d007      	beq.n	8000f36 <HAL_GPIO_Init+0x20e>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4b      	ldr	r2, [pc, #300]	@ (8001058 <HAL_GPIO_Init+0x330>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d101      	bne.n	8000f32 <HAL_GPIO_Init+0x20a>
 8000f2e:	2307      	movs	r3, #7
 8000f30:	e00e      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f32:	2308      	movs	r3, #8
 8000f34:	e00c      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f36:	2306      	movs	r3, #6
 8000f38:	e00a      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	e008      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e004      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x228>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	69fa      	ldr	r2, [r7, #28]
 8000f52:	f002 0203 	and.w	r2, r2, #3
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	4093      	lsls	r3, r2
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f60:	4935      	ldr	r1, [pc, #212]	@ (8001038 <HAL_GPIO_Init+0x310>)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f92:	4a32      	ldr	r2, [pc, #200]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <HAL_GPIO_Init+0x334>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001010:	4a12      	ldr	r2, [pc, #72]	@ (800105c <HAL_GPIO_Init+0x334>)
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3301      	adds	r3, #1
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	2b0f      	cmp	r3, #15
 8001020:	f67f ae90 	bls.w	8000d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3724      	adds	r7, #36	@ 0x24
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40023800 	.word	0x40023800
 8001038:	40013800 	.word	0x40013800
 800103c:	40020000 	.word	0x40020000
 8001040:	40020400 	.word	0x40020400
 8001044:	40020800 	.word	0x40020800
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021000 	.word	0x40021000
 8001050:	40021400 	.word	0x40021400
 8001054:	40021800 	.word	0x40021800
 8001058:	40021c00 	.word	0x40021c00
 800105c:	40013c00 	.word	0x40013c00

08001060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	691a      	ldr	r2, [r3, #16]
 8001070:	887b      	ldrh	r3, [r7, #2]
 8001072:	4013      	ands	r3, r2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d002      	beq.n	800107e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001078:	2301      	movs	r3, #1
 800107a:	73fb      	strb	r3, [r7, #15]
 800107c:	e001      	b.n	8001082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001082:	7bfb      	ldrb	r3, [r7, #15]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ac:	e003      	b.n	80010b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	041a      	lsls	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	619a      	str	r2, [r3, #24]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d101      	bne.n	80010d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e267      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d075      	beq.n	80011ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010e2:	4b88      	ldr	r3, [pc, #544]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f003 030c 	and.w	r3, r3, #12
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	d00c      	beq.n	8001108 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ee:	4b85      	ldr	r3, [pc, #532]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d112      	bne.n	8001120 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010fa:	4b82      	ldr	r3, [pc, #520]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001102:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001106:	d10b      	bne.n	8001120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001108:	4b7e      	ldr	r3, [pc, #504]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d05b      	beq.n	80011cc <HAL_RCC_OscConfig+0x108>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d157      	bne.n	80011cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e242      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001128:	d106      	bne.n	8001138 <HAL_RCC_OscConfig+0x74>
 800112a:	4b76      	ldr	r3, [pc, #472]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a75      	ldr	r2, [pc, #468]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e01d      	b.n	8001174 <HAL_RCC_OscConfig+0xb0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x98>
 8001142:	4b70      	ldr	r3, [pc, #448]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a6f      	ldr	r2, [pc, #444]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001148:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b6d      	ldr	r3, [pc, #436]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a6c      	ldr	r2, [pc, #432]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e00b      	b.n	8001174 <HAL_RCC_OscConfig+0xb0>
 800115c:	4b69      	ldr	r3, [pc, #420]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a68      	ldr	r2, [pc, #416]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001162:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	4b66      	ldr	r3, [pc, #408]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a65      	ldr	r2, [pc, #404]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 800116e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d013      	beq.n	80011a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117c:	f7ff fcbe 	bl	8000afc <HAL_GetTick>
 8001180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001182:	e008      	b.n	8001196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001184:	f7ff fcba 	bl	8000afc <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	2b64      	cmp	r3, #100	@ 0x64
 8001190:	d901      	bls.n	8001196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e207      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001196:	4b5b      	ldr	r3, [pc, #364]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d0f0      	beq.n	8001184 <HAL_RCC_OscConfig+0xc0>
 80011a2:	e014      	b.n	80011ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a4:	f7ff fcaa 	bl	8000afc <HAL_GetTick>
 80011a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011aa:	e008      	b.n	80011be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011ac:	f7ff fca6 	bl	8000afc <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	2b64      	cmp	r3, #100	@ 0x64
 80011b8:	d901      	bls.n	80011be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e1f3      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011be:	4b51      	ldr	r3, [pc, #324]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d1f0      	bne.n	80011ac <HAL_RCC_OscConfig+0xe8>
 80011ca:	e000      	b.n	80011ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d063      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011da:	4b4a      	ldr	r3, [pc, #296]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f003 030c 	and.w	r3, r3, #12
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d00b      	beq.n	80011fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011e6:	4b47      	ldr	r3, [pc, #284]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ee:	2b08      	cmp	r3, #8
 80011f0:	d11c      	bne.n	800122c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011f2:	4b44      	ldr	r3, [pc, #272]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d116      	bne.n	800122c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fe:	4b41      	ldr	r3, [pc, #260]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_RCC_OscConfig+0x152>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d001      	beq.n	8001216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e1c7      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001216:	4b3b      	ldr	r3, [pc, #236]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	4937      	ldr	r1, [pc, #220]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	e03a      	b.n	80012a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d020      	beq.n	8001276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001234:	4b34      	ldr	r3, [pc, #208]	@ (8001308 <HAL_RCC_OscConfig+0x244>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123a:	f7ff fc5f 	bl	8000afc <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff fc5b 	bl	8000afc <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e1a8      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001254:	4b2b      	ldr	r3, [pc, #172]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001260:	4b28      	ldr	r3, [pc, #160]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	4925      	ldr	r1, [pc, #148]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001270:	4313      	orrs	r3, r2
 8001272:	600b      	str	r3, [r1, #0]
 8001274:	e015      	b.n	80012a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001276:	4b24      	ldr	r3, [pc, #144]	@ (8001308 <HAL_RCC_OscConfig+0x244>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fc3e 	bl	8000afc <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001284:	f7ff fc3a 	bl	8000afc <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e187      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001296:	4b1b      	ldr	r3, [pc, #108]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0308 	and.w	r3, r3, #8
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d036      	beq.n	800131c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d016      	beq.n	80012e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b6:	4b15      	ldr	r3, [pc, #84]	@ (800130c <HAL_RCC_OscConfig+0x248>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012bc:	f7ff fc1e 	bl	8000afc <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc1a 	bl	8000afc <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e167      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <HAL_RCC_OscConfig+0x240>)
 80012d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0f0      	beq.n	80012c4 <HAL_RCC_OscConfig+0x200>
 80012e2:	e01b      	b.n	800131c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_RCC_OscConfig+0x248>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fc07 	bl	8000afc <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	e00e      	b.n	8001310 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f2:	f7ff fc03 	bl	8000afc <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d907      	bls.n	8001310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e150      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
 8001304:	40023800 	.word	0x40023800
 8001308:	42470000 	.word	0x42470000
 800130c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001310:	4b88      	ldr	r3, [pc, #544]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1ea      	bne.n	80012f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	f000 8097 	beq.w	8001458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800132e:	4b81      	ldr	r3, [pc, #516]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10f      	bne.n	800135a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b7d      	ldr	r3, [pc, #500]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a7c      	ldr	r2, [pc, #496]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b7a      	ldr	r3, [pc, #488]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001356:	2301      	movs	r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	4b77      	ldr	r3, [pc, #476]	@ (8001538 <HAL_RCC_OscConfig+0x474>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d118      	bne.n	8001398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001366:	4b74      	ldr	r3, [pc, #464]	@ (8001538 <HAL_RCC_OscConfig+0x474>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a73      	ldr	r2, [pc, #460]	@ (8001538 <HAL_RCC_OscConfig+0x474>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001372:	f7ff fbc3 	bl	8000afc <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137a:	f7ff fbbf 	bl	8000afc <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e10c      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	4b6a      	ldr	r3, [pc, #424]	@ (8001538 <HAL_RCC_OscConfig+0x474>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x2ea>
 80013a0:	4b64      	ldr	r3, [pc, #400]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a4:	4a63      	ldr	r2, [pc, #396]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ac:	e01c      	b.n	80013e8 <HAL_RCC_OscConfig+0x324>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x30c>
 80013b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013ce:	e00b      	b.n	80013e8 <HAL_RCC_OscConfig+0x324>
 80013d0:	4b58      	ldr	r3, [pc, #352]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d4:	4a57      	ldr	r2, [pc, #348]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013d6:	f023 0301 	bic.w	r3, r3, #1
 80013da:	6713      	str	r3, [r2, #112]	@ 0x70
 80013dc:	4b55      	ldr	r3, [pc, #340]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013e0:	4a54      	ldr	r2, [pc, #336]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80013e2:	f023 0304 	bic.w	r3, r3, #4
 80013e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d015      	beq.n	800141c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f0:	f7ff fb84 	bl	8000afc <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013f6:	e00a      	b.n	800140e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f8:	f7ff fb80 	bl	8000afc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001406:	4293      	cmp	r3, r2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e0cb      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800140e:	4b49      	ldr	r3, [pc, #292]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0ee      	beq.n	80013f8 <HAL_RCC_OscConfig+0x334>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800141c:	f7ff fb6e 	bl	8000afc <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff fb6a 	bl	8000afc <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e0b5      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800143a:	4b3e      	ldr	r3, [pc, #248]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1ee      	bne.n	8001424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001446:	7dfb      	ldrb	r3, [r7, #23]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d105      	bne.n	8001458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144c:	4b39      	ldr	r3, [pc, #228]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001450:	4a38      	ldr	r2, [pc, #224]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001452:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001456:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	2b00      	cmp	r3, #0
 800145e:	f000 80a1 	beq.w	80015a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001462:	4b34      	ldr	r3, [pc, #208]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	2b08      	cmp	r3, #8
 800146c:	d05c      	beq.n	8001528 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b02      	cmp	r3, #2
 8001474:	d141      	bne.n	80014fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001476:	4b31      	ldr	r3, [pc, #196]	@ (800153c <HAL_RCC_OscConfig+0x478>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fb3e 	bl	8000afc <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff fb3a 	bl	8000afc <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e087      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001496:	4b27      	ldr	r3, [pc, #156]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69da      	ldr	r2, [r3, #28]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b0:	019b      	lsls	r3, r3, #6
 80014b2:	431a      	orrs	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014b8:	085b      	lsrs	r3, r3, #1
 80014ba:	3b01      	subs	r3, #1
 80014bc:	041b      	lsls	r3, r3, #16
 80014be:	431a      	orrs	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c4:	061b      	lsls	r3, r3, #24
 80014c6:	491b      	ldr	r1, [pc, #108]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014cc:	4b1b      	ldr	r3, [pc, #108]	@ (800153c <HAL_RCC_OscConfig+0x478>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb13 	bl	8000afc <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff fb0f 	bl	8000afc <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e05c      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x416>
 80014f8:	e054      	b.n	80015a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fa:	4b10      	ldr	r3, [pc, #64]	@ (800153c <HAL_RCC_OscConfig+0x478>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fafc 	bl	8000afc <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff faf8 	bl	8000afc <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e045      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <HAL_RCC_OscConfig+0x470>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x444>
 8001526:	e03d      	b.n	80015a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d107      	bne.n	8001540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e038      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
 8001534:	40023800 	.word	0x40023800
 8001538:	40007000 	.word	0x40007000
 800153c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001540:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <HAL_RCC_OscConfig+0x4ec>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d028      	beq.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001558:	429a      	cmp	r2, r3
 800155a:	d121      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001566:	429a      	cmp	r2, r3
 8001568:	d11a      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001570:	4013      	ands	r3, r2
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001578:	4293      	cmp	r3, r2
 800157a:	d111      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001586:	085b      	lsrs	r3, r3, #1
 8001588:	3b01      	subs	r3, #1
 800158a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800158c:	429a      	cmp	r2, r3
 800158e:	d107      	bne.n	80015a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800159a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e0cc      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c8:	4b68      	ldr	r3, [pc, #416]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0307 	and.w	r3, r3, #7
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d90c      	bls.n	80015f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	4b65      	ldr	r3, [pc, #404]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015de:	4b63      	ldr	r3, [pc, #396]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e0b8      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001608:	4b59      	ldr	r3, [pc, #356]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	4a58      	ldr	r2, [pc, #352]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001612:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001620:	4b53      	ldr	r3, [pc, #332]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	4a52      	ldr	r2, [pc, #328]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001626:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800162a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800162c:	4b50      	ldr	r3, [pc, #320]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	494d      	ldr	r1, [pc, #308]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	4313      	orrs	r3, r2
 800163c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	2b00      	cmp	r3, #0
 8001648:	d044      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d107      	bne.n	8001662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001652:	4b47      	ldr	r3, [pc, #284]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d119      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e07f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d003      	beq.n	8001672 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800166e:	2b03      	cmp	r3, #3
 8001670:	d107      	bne.n	8001682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001672:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001682:	4b3b      	ldr	r3, [pc, #236]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d101      	bne.n	8001692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e067      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001692:	4b37      	ldr	r3, [pc, #220]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f023 0203 	bic.w	r2, r3, #3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	4934      	ldr	r1, [pc, #208]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016a4:	f7ff fa2a 	bl	8000afc <HAL_GetTick>
 80016a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ac:	f7ff fa26 	bl	8000afc <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e04f      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 020c 	and.w	r2, r3, #12
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d1eb      	bne.n	80016ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d4:	4b25      	ldr	r3, [pc, #148]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0307 	and.w	r3, r3, #7
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d20c      	bcs.n	80016fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b22      	ldr	r3, [pc, #136]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e032      	b.n	8001762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001708:	4b19      	ldr	r3, [pc, #100]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4916      	ldr	r1, [pc, #88]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	4313      	orrs	r3, r2
 8001718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0308 	and.w	r3, r3, #8
 8001722:	2b00      	cmp	r3, #0
 8001724:	d009      	beq.n	800173a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001726:	4b12      	ldr	r3, [pc, #72]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	490e      	ldr	r1, [pc, #56]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800173a:	f000 f821 	bl	8001780 <HAL_RCC_GetSysClockFreq>
 800173e:	4602      	mov	r2, r0
 8001740:	4b0b      	ldr	r3, [pc, #44]	@ (8001770 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	f003 030f 	and.w	r3, r3, #15
 800174a:	490a      	ldr	r1, [pc, #40]	@ (8001774 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	5ccb      	ldrb	r3, [r1, r3]
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a09      	ldr	r2, [pc, #36]	@ (8001778 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_RCC_ClockConfig+0x1c8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff f98a 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023c00 	.word	0x40023c00
 8001770:	40023800 	.word	0x40023800
 8001774:	080019fc 	.word	0x080019fc
 8001778:	20000000 	.word	0x20000000
 800177c:	20000004 	.word	0x20000004

08001780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001784:	b094      	sub	sp, #80	@ 0x50
 8001786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001790:	2300      	movs	r3, #0
 8001792:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001798:	4b79      	ldr	r3, [pc, #484]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x200>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f003 030c 	and.w	r3, r3, #12
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d00d      	beq.n	80017c0 <HAL_RCC_GetSysClockFreq+0x40>
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	f200 80e1 	bhi.w	800196c <HAL_RCC_GetSysClockFreq+0x1ec>
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_RCC_GetSysClockFreq+0x34>
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d003      	beq.n	80017ba <HAL_RCC_GetSysClockFreq+0x3a>
 80017b2:	e0db      	b.n	800196c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b4:	4b73      	ldr	r3, [pc, #460]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x204>)
 80017b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017b8:	e0db      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ba:	4b73      	ldr	r3, [pc, #460]	@ (8001988 <HAL_RCC_GetSysClockFreq+0x208>)
 80017bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017be:	e0d8      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x200>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d063      	beq.n	800189e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x200>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	099b      	lsrs	r3, r3, #6
 80017dc:	2200      	movs	r2, #0
 80017de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017ea:	2300      	movs	r3, #0
 80017ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017f2:	4622      	mov	r2, r4
 80017f4:	462b      	mov	r3, r5
 80017f6:	f04f 0000 	mov.w	r0, #0
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	0159      	lsls	r1, r3, #5
 8001800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001804:	0150      	lsls	r0, r2, #5
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4621      	mov	r1, r4
 800180c:	1a51      	subs	r1, r2, r1
 800180e:	6139      	str	r1, [r7, #16]
 8001810:	4629      	mov	r1, r5
 8001812:	eb63 0301 	sbc.w	r3, r3, r1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 0300 	mov.w	r3, #0
 8001820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001824:	4659      	mov	r1, fp
 8001826:	018b      	lsls	r3, r1, #6
 8001828:	4651      	mov	r1, sl
 800182a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800182e:	4651      	mov	r1, sl
 8001830:	018a      	lsls	r2, r1, #6
 8001832:	4651      	mov	r1, sl
 8001834:	ebb2 0801 	subs.w	r8, r2, r1
 8001838:	4659      	mov	r1, fp
 800183a:	eb63 0901 	sbc.w	r9, r3, r1
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800184a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800184e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001852:	4690      	mov	r8, r2
 8001854:	4699      	mov	r9, r3
 8001856:	4623      	mov	r3, r4
 8001858:	eb18 0303 	adds.w	r3, r8, r3
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	462b      	mov	r3, r5
 8001860:	eb49 0303 	adc.w	r3, r9, r3
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001872:	4629      	mov	r1, r5
 8001874:	024b      	lsls	r3, r1, #9
 8001876:	4621      	mov	r1, r4
 8001878:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800187c:	4621      	mov	r1, r4
 800187e:	024a      	lsls	r2, r1, #9
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001886:	2200      	movs	r2, #0
 8001888:	62bb      	str	r3, [r7, #40]	@ 0x28
 800188a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800188c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001890:	f7fe fc9a 	bl	80001c8 <__aeabi_uldivmod>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4613      	mov	r3, r2
 800189a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800189c:	e058      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800189e:	4b38      	ldr	r3, [pc, #224]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x200>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	099b      	lsrs	r3, r3, #6
 80018a4:	2200      	movs	r2, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	4611      	mov	r1, r2
 80018aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	2300      	movs	r3, #0
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018b8:	4642      	mov	r2, r8
 80018ba:	464b      	mov	r3, r9
 80018bc:	f04f 0000 	mov.w	r0, #0
 80018c0:	f04f 0100 	mov.w	r1, #0
 80018c4:	0159      	lsls	r1, r3, #5
 80018c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ca:	0150      	lsls	r0, r2, #5
 80018cc:	4602      	mov	r2, r0
 80018ce:	460b      	mov	r3, r1
 80018d0:	4641      	mov	r1, r8
 80018d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80018d6:	4649      	mov	r1, r9
 80018d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018f0:	ebb2 040a 	subs.w	r4, r2, sl
 80018f4:	eb63 050b 	sbc.w	r5, r3, fp
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	f04f 0300 	mov.w	r3, #0
 8001900:	00eb      	lsls	r3, r5, #3
 8001902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001906:	00e2      	lsls	r2, r4, #3
 8001908:	4614      	mov	r4, r2
 800190a:	461d      	mov	r5, r3
 800190c:	4643      	mov	r3, r8
 800190e:	18e3      	adds	r3, r4, r3
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	464b      	mov	r3, r9
 8001914:	eb45 0303 	adc.w	r3, r5, r3
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001926:	4629      	mov	r1, r5
 8001928:	028b      	lsls	r3, r1, #10
 800192a:	4621      	mov	r1, r4
 800192c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001930:	4621      	mov	r1, r4
 8001932:	028a      	lsls	r2, r1, #10
 8001934:	4610      	mov	r0, r2
 8001936:	4619      	mov	r1, r3
 8001938:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800193a:	2200      	movs	r2, #0
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	61fa      	str	r2, [r7, #28]
 8001940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001944:	f7fe fc40 	bl	80001c8 <__aeabi_uldivmod>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4613      	mov	r3, r2
 800194e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001950:	4b0b      	ldr	r3, [pc, #44]	@ (8001980 <HAL_RCC_GetSysClockFreq+0x200>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	0c1b      	lsrs	r3, r3, #16
 8001956:	f003 0303 	and.w	r3, r3, #3
 800195a:	3301      	adds	r3, #1
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001960:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001962:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800196a:	e002      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_RCC_GetSysClockFreq+0x204>)
 800196e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001974:	4618      	mov	r0, r3
 8001976:	3750      	adds	r7, #80	@ 0x50
 8001978:	46bd      	mov	sp, r7
 800197a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	00f42400 	.word	0x00f42400
 8001988:	007a1200 	.word	0x007a1200

0800198c <memset>:
 800198c:	4402      	add	r2, r0
 800198e:	4603      	mov	r3, r0
 8001990:	4293      	cmp	r3, r2
 8001992:	d100      	bne.n	8001996 <memset+0xa>
 8001994:	4770      	bx	lr
 8001996:	f803 1b01 	strb.w	r1, [r3], #1
 800199a:	e7f9      	b.n	8001990 <memset+0x4>

0800199c <__libc_init_array>:
 800199c:	b570      	push	{r4, r5, r6, lr}
 800199e:	4d0d      	ldr	r5, [pc, #52]	@ (80019d4 <__libc_init_array+0x38>)
 80019a0:	4c0d      	ldr	r4, [pc, #52]	@ (80019d8 <__libc_init_array+0x3c>)
 80019a2:	1b64      	subs	r4, r4, r5
 80019a4:	10a4      	asrs	r4, r4, #2
 80019a6:	2600      	movs	r6, #0
 80019a8:	42a6      	cmp	r6, r4
 80019aa:	d109      	bne.n	80019c0 <__libc_init_array+0x24>
 80019ac:	4d0b      	ldr	r5, [pc, #44]	@ (80019dc <__libc_init_array+0x40>)
 80019ae:	4c0c      	ldr	r4, [pc, #48]	@ (80019e0 <__libc_init_array+0x44>)
 80019b0:	f000 f818 	bl	80019e4 <_init>
 80019b4:	1b64      	subs	r4, r4, r5
 80019b6:	10a4      	asrs	r4, r4, #2
 80019b8:	2600      	movs	r6, #0
 80019ba:	42a6      	cmp	r6, r4
 80019bc:	d105      	bne.n	80019ca <__libc_init_array+0x2e>
 80019be:	bd70      	pop	{r4, r5, r6, pc}
 80019c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80019c4:	4798      	blx	r3
 80019c6:	3601      	adds	r6, #1
 80019c8:	e7ee      	b.n	80019a8 <__libc_init_array+0xc>
 80019ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80019ce:	4798      	blx	r3
 80019d0:	3601      	adds	r6, #1
 80019d2:	e7f2      	b.n	80019ba <__libc_init_array+0x1e>
 80019d4:	08001a14 	.word	0x08001a14
 80019d8:	08001a14 	.word	0x08001a14
 80019dc:	08001a14 	.word	0x08001a14
 80019e0:	08001a18 	.word	0x08001a18

080019e4 <_init>:
 80019e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019e6:	bf00      	nop
 80019e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ea:	bc08      	pop	{r3}
 80019ec:	469e      	mov	lr, r3
 80019ee:	4770      	bx	lr

080019f0 <_fini>:
 80019f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f2:	bf00      	nop
 80019f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019f6:	bc08      	pop	{r3}
 80019f8:	469e      	mov	lr, r3
 80019fa:	4770      	bx	lr
